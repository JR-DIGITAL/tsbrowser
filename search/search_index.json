{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p><code>tsbrowser</code> is a Python utility to visualize and label satellite data time-series.</p> <p>It provides an interactive plot in which segments and events can be labelled. The plot provides 2D time series, image chip visualization as well as integration with ESRI wayback machine for very high resolution imagery.</p>"},{"location":"#installation","title":"Installation","text":"<p>The package can be installed directly from github. Since the package provides a script entrypoint, it can also be run directly using <code>uvx</code> or <code>pipx</code>.</p> pippipxuvx <pre><code>pip install git+https://github.com/JR-DIGITAL/tsbrowser.git\ntsbrowser\n</code></pre> <pre><code>pipx run --spec git+https://github.com/JR-DIGITAL/tsbrowser.git tsbrowser\n</code></pre> <pre><code>uvx git+https://github.com/JR-DIGITAL/tsbrowser.git\n</code></pre> <p>This should run the <code>tsbrowser</code> command line interface and print the following output:</p> <pre><code>usage: tsbrowser [-h] [--pid [STR or INT ...]] [--pattern STR] [--semilogy] [--scalewindow FLOAT FLOAT] [--startdate YYYYMMDD] [--stopdate YYYYMMDD] [--preload-threads INT] PATH\ntsbrowser: error: the following arguments are required: PATH\n</code></pre>"},{"location":"running/","title":"Running <code>tsbrowser</code>","text":"<p>Once all the prerequisites are met, <code>tsbrowser</code> can be used to carry out the interpretation of time series. There are two operating modes depending on how the utility is called.</p> <p>Run <code>tsbrowser --help</code> to get a list of supported arguments. In general, the tool has only one required argument: the configuration file.</p>"},{"location":"running/#manual-selection-of-samples","title":"Manual selection of samples","text":"<p>You can call the tool with the option <code>--pid</code> and manually select point IDs for display, at least one. Points will be displayed on at a time in the order they have been selected.  </p> <pre><code>tsbrowser /path/to/tsbrowser_config.py --pid 1 2 3\n</code></pre> <p>The given IDs must be contained in the vector file specified in the given <code>tsbrowser</code> configuration file. In the example above, the sample IDs 1, 2, and 3 will be shown sequentially to the interpreter.</p>"},{"location":"running/#automatic-orchestrator","title":"Automatic orchestrator","text":"<p>Calling the tool without the <code>--pid</code> option enables the automatic orchestrator.</p> <pre><code>tsbrowser /path/to/tsbrowser_config.py\n</code></pre> <p>This mode compares which samples are in the sample vector file and which ones were already interpreted (i.e., have a flag file in the <code>flag_dir</code> specified in the config file). This mode then sequentially shows samples from the sample vector file which have not been interpreted yet.</p>"},{"location":"running/#interactive-plot-interface","title":"Interactive plot interface","text":"<p>Once the imagery is loaded, an interactive <code>matplotlib</code> figure opens. The figure elements are explained in the annotated image below. If the image appears too small, use right click \u2192 open image in new tab to view it larger. In the example, the interpreter has identified and marked three segments in the time series.</p> <p></p>"},{"location":"running/#interactions-using-the-mouse","title":"Interactions using the mouse","text":"<p>The interactive figure allows you to quickly browse through the time series. Just left-click on any of the blue dots to display the corresponding image in the upper left and middle image sub-plots.</p> <p>A right-click on any of the blue dots sets the default flag, i.e. a labelled, vertical green bar, on the corresponding observation. The label is the configured default label. If the corresponding observation is already flagged, the right-click removes the flag.</p> <p>Use the mouse wheel to browse through the available VHR imagery shown in the upper right image sub-plot. </p> <p>You may also use the standard figure tools in the lower left part of the window - pan and zoom work in both time series and image plots. </p>"},{"location":"running/#interactions-using-the-keyboard","title":"Interactions using the keyboard","text":"<p>Keybord commands are enabled by using the Alt key as a modifier. Browsing through time is mapped to the arrow keys:</p> <ul> <li>Alt + \u2192 ... move one step forward in the HR time series</li> <li>Alt + \u2190 ... move one step backward in the HR time series</li> <li>Alt + \u2191 ... move one step forward in the VHR time series</li> <li>Alt + \u2193 ... move one step backward in the VHR time series</li> </ul> <p>You also need to use the keyboard in order to set any flags other than the default flag. </p> <ul> <li>Alt + 0 - 9 ... set flag labelled 0 - 9 on the currently selected observation (marked by the orange circle) </li> <li>Alt + letter ... you may define additional, non-numeric flags using the parameter <code>add_flag_labels</code> in the configuration file</li> </ul>"},{"location":"running/#finishing-the-interpretation","title":"Finishing the interpretation","text":"<p>Once you are finished with setting flags according to your specific interpretation nomenclature and guideline, you can close the figure window (although this is not required). Then move your attention to the console running the tool. </p> <p>Firstly, you are prompted to enter your subjective confidence regarding the interpretation (high, medium, or low). This is required to finish the interpretation of a sample properly. Secondly, you may enter an optional comment about the sample. Press enter again to confirm and the next plot will be displayed if there are any left in the queue.  </p>"},{"location":"running/#accessing-the-interpretation-results","title":"Accessing the interpretation results","text":"<p>For each sample point, the interpretation result is stored in a separate JSON file. The JSON files can be found in the directory given by the configuration parameter <code>flag_dir</code>. An example is given below.</p> Example Interpretation result JSON file<pre><code>{\n    \"flags\": {\n        \"2020-07-23 10:37:36.000000\": \"2\",\n        \"2020-11-30 10:37:31.000000\": \"2\",\n        \"2018-02-14 10:37:27.000000\": \"1\",\n        \"2020-07-13 10:37:35.000000\": \"1\"\n    },\n    \"confidence\": \"high\",\n    \"comment\": \"bark beetle 2020\",\n    \"interpreter\": \"jdoe\"\n}\n</code></pre> <p>As you can see, the flag timestamps and  corresponding labels are stored. Additionally you can find the interpreter confidence self-assessment, the comment string, and the interpreter ID in the file.</p>"},{"location":"setup/","title":"Setup","text":"<p>To run the package, the following prerequisites need to be met:</p> <ol> <li>Input imagery available</li> <li>Vector file with sample points</li> <li>Prepared tsbrowser configuration file</li> </ol>"},{"location":"setup/#input-imagery","title":"Input imagery","text":"<p>To run the package, time series of satellite imagery are required. Have a look at the demonstration data provided here to learn how to structure these data. The tool supports two ways of data preparation:</p> <ol> <li>Default mode</li> <li>Legacy mode</li> </ol> <p>In default mode, you need to prepare the imagery together with corresponding quality assessment (QA) layers, typically cloud masks. The tool then evaluates the QA layers on-the-fly in order to plot clean time series. The second option, legacy mode, bypasses on-the-fly evaluation and therefore requires pre-filtered imagery. The demo data set contains examples for both operating modes in the raster directory.</p>"},{"location":"setup/#vector-file-with-sample-points","title":"Vector file with sample points","text":"<p>The sample vector file provides the actual sample points which should be interpreted. To give the <code>tsbrowser</code> utility all the necessary information, a few fields in the attribute table need to be specified per sample:</p> <ul> <li>ID: unique ID of the sample (<code>int</code> or <code>str</code>)</li> <li>QA raster file directory for the sample (<code>str</code>, path either absolute or relative to the vector file directory)</li> <li>Imagery raster file directory for the sample (<code>str</code>, path either absolute or relative to the vector file directory)</li> </ul> <p>The exact names of the respective attributes need to be given in the <code>tsbrowser</code> configuration file. The demonstration data set includes a suitable shapefile in the vector directory.</p>"},{"location":"setup/#tsbrowser-configuration-file","title":"<code>tsbrowser</code> configuration file","text":"<p>The <code>tsbrowser</code> configuration file includes all the available parameters of the tool. Please refer to the comments given for each parameter for further details. The configuration of <code>tsbrowser</code> depends strongly on locally available input data and its specific properties. Therefore, there is no default configuration that will work out-of-the-box. The configuration file needs to be set up for each use case. If interpretation is carried out by multiple users, we recommend to split the sample points into several partitions and create configurations per user. </p> Configuration tsbrowser configuration file<pre><code>import matplotlib.dates as mdates\n\n# set interpreter ID\ninterpreter = 'jdoe'\n\n# set point sample vector file path\n# the path can be specified either absolute or relative to the configuration file directory\npath = \"vector/demo_points.shp\"\n\n# define required attribute names\nlegacy_mode = False  # if True, the program expects pre-processed image chips and all\n# parameters regarding on-the-fly quality evaluation are ignored\nattr_id = \"id\"\nattr_q_loc = \"default\"  # location of quality raster files for the feature\nattr_i_loc = \"default\"  # location of image raster files for the feature\n\n# set quality raster file search options\nq_pattern = \"SCL*.tif\"\nq_recursive = True\n\n# set image raster file search options\ni_pattern = \"L2A*.tif\"\ni_recursive = True\n\n# set options for retrieving the image acquisition timestamp\nt_mode = \"filename\"  # possible values: metadata, filename\nt_slice = slice(4, 19)  # used if t_mode == filename\nt_format = \"%Y%m%dT%H%M%S\"  # used if t_mode == filename\n\n# set quality evaluation parameters\nq_mode = \"classes\"  # possible values: classes, threshold_lt, threshold_gt\nq_band = 1  # set which band to read from each quality raster file\nmasking_classes = (0, 8, 9, 11)  # used if mode == 'classes'\nvalid_classes = None \neval_bitwise = False # used if mode == \"classes\"\nthreshold = 3  # used if mode in ('threshold_gt', 'threshold_lt')\noverall_valid_ratio = 0.1\nspecific_radius = 9\nspecific_valid_ratio = 0.8\n\n# define the flag label set with a right mouse button click\ndefault_flag_label = \"0\"\nadd_flag_labels = \"a b c d e f g h\".split()\n\n# set an output directory to store flag files (json format)\n# if None, write to the directory containing the sample vector file \nflag_dir = \"flags-demo\"\n\n# assign names to input bands\nlayermap = {\"B02\": 1, \"B03\": 2, \"B04\": 3, \"B08\": 4, \"B11\": 5}\n\n# Indices which should be calculated on the fly\n# only simple arithmetic operations are supported (+,-,*,/)\nindices = {\n    # \"NDMI\": \"(B08 - B11) / (B08 + B11)\",  # Normalized Difference Moisture Index\n    \"NDVI\": \"(B08 - B04) / (B08 + B04)\",  # Normalized Difference Vegetation Index\n    # \"NBR\": \"(B08 - B11) / (B08 + B11)\",  # Normalized Burn Ratio\n    # \"TCW\": \" 0.0315*B02 + 0.2021*B03 + 0.3102*B04 + 0.1594*B08 - 0.6806*B11 - 0.6109*B12\" # TC wetness\n}\n\n# configure which bands to display in the 3 time series sub-plots\ntimeseries = {\"ts_B1\": \"B04\", \"ts_B2\": \"B11\", \"ts_B3\": \"NDVI\"}\n\n# configure which band combination to display in the 2 image sub-plots\nimages = {\"img_L\": (\"B04\", \"B03\", \"B02\"), \"img_R\": (\"B11\", \"B08\", \"B04\")}\n\n# initial image chip size [m]\nchip_width = 1000\nchip_height = 1000\n\n# image pixel value scale factor handling\napply_metadata_zscale = True\nzscale = 1.0\n\n# define band-specific min/max contrast stretch (absolute reflectance, e.g. 0.1 means 10% reflectance)\ncontrast = {\n    \"B02\": (0.0, 1500.0),\n    \"B03\": (0.0, 1800.0),\n    \"B04\": (0.0, 2000.0),\n    \"B08\": (0.0, 6000.0),\n    \"B11\": (0.0, 5000.0),\n}\n\n# contrast = {'B02': 'mean_stddev',\n# 'B03': 'mean_stddev',\n# 'B04': 'mean_stddev',\n# 'B08': 'mean_stddev',\n# 'B11': 'mean_stddev'}\n\n# contrast = {'B02': 'median_mad',\n# 'B03': 'median_mad',\n# 'B04': 'median_mad',\n# 'B08': 'median_mad',\n# 'B11': 'median_mad'}\n\n# contrast = {'B02': 'pct_clip',\n# 'B03': 'pct_clip',\n# 'B04': 'pct_clip',\n# 'B05': 'pct_clip',\n# 'B08': 'pct_clip',\n# 'B11': 'pct_clip'\n# }\n\npct_min = 0.3  # for stretch mode pct_clip\npct_max = 98.0  # for stretch mode pct_clip\n\nstd_factor = 2.5  # for stretch mode mean_stddev and median_mad\n\n# format x-axis of time series plots\nmonthLoc = mdates.MonthLocator(bymonth=range(1, 13, 3)) # quarterly ticks\n# monthLoc = mdates.MonthLocator(bymonth=range(1, 13, 6)) # half-yearly ticks\nmonthFmt = mdates.DateFormatter(\"%Y %b %d\")\n\n# VHR module options\nvhr_zoom = 17\nremove_duplicates = True\n</code></pre>"}]}